#pragma once
#include <lcom/lcf.h>

#include <stdint.h>
#include <stdio.h>
#include "utils.h"
#include "i8042.h"
#include "video_gr.h"
#include "sprites/cursor.xpm"

typedef struct {
    int x, y;
    xpm_image_t img;
} Cursor;

#define PLAY_BUTTON_X_POS_LEFT 340
#define PLAY_BUTTON_X_POS_RIGHT 450
#define PLAY_BUTTON_Y_POS_UP 200
#define PLAY_BUTTON_Y_POS_DOWN 260
#define SCOREBOARD_BUTTON_X_POS_LEFT 280
#define SCOREBOARD_BUTTON_X_POS_RIGHT 510
#define SCOREBOARD_BUTTON_Y_POS_UP 325
#define SCOREBOARD_BUTTON_Y_POS_DOWN 350
#define EXIT_BUTTON_X_POS_LEFT 340
#define EXIT_BUTTON_X_POS_RIGHT 420
#define EXIT_BUTTON_Y_POS_UP 435
#define EXIT_BUTTON_Y_POS_DOWN 465

/**
 * @brief Subscribes mouse interrupts
 * 
 * @param bit_no Variable that will store the mouse IRQ
 * @return int 0 if success, 1 otherwise
 */
int mouse_subscribe_int(uint8_t *bit_no);

/**
 * @brief Unsubscribes mouse interrupts
 * 
 * @return int 0 if success, 1 otherwise
 */
int mouse_unsubscribe_int();

/**
 * @brief handles the mouse interrupt
 * 
 */
void mouse_ih();

/**
 * @brief builds the mouse packet 
 * 
 * @param pacote struct that will store the built mouse packet
 */
void buildPacket(struct packet * pacote);

/**
 * @brief Write a command to mouse
 * 
 * @param cmd command to be written
 * @param resp answer returned by the command that was written 
 * @return int 0 if sucess, 1 otherwise
 */
int mouse_write_cmd(uint32_t cmd, uint8_t *resp);

/**
 * @brief Enables mouse data reporting
 * 
 * @return int 0 if sucess, 1 otherwise
 */
int mouse_enable_data_report();

/**
 * @brief Disables mouse data reporting
 * 
 * @return int 0 if sucess, 1 otherwise
 */
int mouse_disable_data_report();

/**
 * @brief Create a cursor object
 * 
 * @return Cursor* 
 */
Cursor * create_cursor();

/**
 * @brief draw the cursor on the screen
 * 
 */
void draw_cursor();

/**
 * @brief cleans the cursor from the screen
 * 
 */
void clean_cursor();

/**
 * @brief Updates the cursor position according to the packet
 * 
 * @param pacote mouse packet generated by the handler
 */
void mouse_update(struct packet * pacote);

/**
 * @brief Checks if the mouse cursor collided with any button of the menu
 * 
 * @return unsigned int index of the collied button ( 0 if didn't collid with any button )
 */
unsigned int check_collision_main_menu();


